from tkinter import *
from random import *

M=[[
[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9],[9,1,1,1,9,9,9,9,9,9,9,9,9,9,9],[9,1,1,1,9,9,9,9,9,9,9,9,9,9,9],[9,8,1,8,9,9,9,9,9,9,9,9,9,9,9], [9,8,1,8,9,9,9,9,8,10,10,10,10,8,9],[9,8,1,8,9,9,9,9,8,1,1,1,1,8,9],[8,8,1,8,8,8,9,9,8,1,1,1,1,8,9],[8,1,1,1,1,8,9,9,8,8,8,1,1,8,9],[8,1,1,1,1,8,9,9,9,9,8,1,1,8,9],[8,1,1,1,1,8,9,9,9,9,8,1,1,6,9],[8,1,1,1,1,3,6,9,9,9,8,1,1,2,9],[8,1,1,1,1,8,2,9,9,9,8,8,8,2,9],
        [8,1,1,1,1,8,2,9,9,9,9,9,8,2,9],[8,1,1,1,1,8,2,8,8,8,8,8,8,2,9],[8,1,1,1,1,8,4,3,3,3,3,3,3,7,9],[8,1,1,1,1,8,8,8,8,1,1,1,1,8,9],
        [8,1,1,1,1,8,9,9,8,1,1,8,8,9,9],[8,1,1,1,1,8,9,9,8,1,1,8,9,9,9],[8,1,1,1,1,8,9,9,8,1,1,8,9,9,9],[8,1,1,1,1,8,9,9,8,1,1,8,9,9,9],[8,1,1,1,1,8,9,9,8,1,1,8,9,9,9],[8,1,1,1,1,8,9,9,8,1,1,8,9,9,9],
        [8,8,8,1,8,8,9,9,8,1,1,8,9,9,9],[9,9,8,1,8,9,9,9,8,1,1,8,9,9,9],[9,9,8,1,8,9,9,9,8,10,10,8,9,9,9],[9,9,8,1,8,9,9,9,9,10,10,9,9,9,9],
        [8,8,8,1,8,9,9,9,9,9,10,9,9,9,9],[8,1,1,1,10,9,9,9,10,10,10,10,9,9,9],[8,1,1,1,10,9,9,9,10,10,10,10,9,9,9],[8,1,1,1,10,9,9,9,9,10,10,10,10,9,9],
        [8,1,1,1,10,9,9,10,10,10,10,10,10,9,9],[8,1,1,1,10,9,9,9,10,10,10,10,10,9,9],[8,1,1,1,10,9,9,9,9,9,9,9,9,9,9],[8,1,1,1,10,9,9,9,9,9,9,9,9,9,9],[8,8,8,8,8,9,9,9,9,9,9,9,9,9,9]],
        
[[18, 18, 18, 18, 18, 18, 18, 11, 18, 18, 18, 18, 18, 18, 18], [18, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 18], 
        [18, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 18], [18, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 18], 
        [18, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 18], [18, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 18], 
        [18, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 18], [18, 18, 18, 18, 18, 18, 18, 11, 18, 18, 18, 18, 18, 18, 18], 
        [18, 19, 19, 19, 19, 18, 11, 11, 11, 11, 18, 18, 18, 11, 18], [18, 19, 19, 19, 19, 18, 11, 11, 11, 11, 18, 18, 18, 11, 18], 
        [18, 19, 19, 19, 19, 18, 11, 11, 11, 11, 18, 18, 18, 11, 18], [18, 19, 19, 19, 19, 18, 11, 11, 11, 11, 18, 18, 18, 11, 18], 
        [18, 19, 19, 19, 19, 18, 11, 11, 11, 11, 18, 18, 18, 11, 18], [18, 18, 19, 19, 18, 11, 11, 11, 11, 11, 18, 18, 18, 11, 18], 
        [18, 19, 19, 19, 18, 11, 11, 11, 11, 11, 11, 11, 11, 11, 18], [18, 19, 19, 18, 18, 18, 18, 11, 11, 11, 11, 18, 18, 18, 18], 
        [18, 19, 19, 19, 19, 19, 18, 11, 11, 11, 11, 11, 11, 11, 18], [11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 18, 18, 18, 18], 
        [18, 19, 19, 19, 19, 19, 18, 11, 18, 18, 11, 11, 11, 11, 18], [18, 19, 19, 19, 19, 19, 18, 18, 18, 11, 11, 11, 11, 11, 18], 
        [18, 19, 19, 19, 19, 19, 18, 18, 18, 18, 18, 18, 18, 11, 18], [18, 19, 19, 19, 19, 19, 18, 18, 18, 18, 11, 11, 11, 11, 18], 
        [18, 19, 19, 19, 19, 19, 18, 18, 18, 18, 18, 18, 18, 11, 18], [18, 19, 19, 19, 19, 19, 18, 18, 18, 18, 18, 18, 18, 11, 18], 
        [18, 19, 19, 19, 19, 19, 18, 18, 18, 18, 18, 18, 18, 11, 18], [18, 19, 19, 19, 19, 19, 18, 11, 18, 18, 18, 18, 18, 11, 18], 
        [18, 19, 19, 19, 19, 19, 18, 11, 18, 18, 18, 18, 18, 11, 18], [18, 19, 19, 19, 19, 19, 18, 11, 18, 18, 18, 18, 18, 11, 18], 
        [18, 19, 19, 19, 19, 19, 18, 11, 18, 18, 11, 11, 11, 11, 18], [18, 19, 19, 19, 19, 19, 18, 11, 18, 18, 11, 11, 11, 11, 18], 
        [18, 18, 18, 18, 18, 18, 18, 11, 11, 11, 11, 11, 11, 18, 18], [18, 18, 18, 18, 18, 18, 18, 11, 18, 18, 11, 11, 18, 18, 18], 
        [18, 18, 18, 18, 18, 18, 18, 11, 18, 18, 11, 11, 18, 18, 18], [18, 18, 18, 18, 18, 18, 18, 11, 11, 11, 11, 11, 18, 18, 18], 
        [18, 18, 18, 18, 18, 18, 18, 11, 18, 18, 18, 18, 18, 18, 18]],
                
[[18, 18, 18, 18, 18, 18, 18, 12, 18, 18, 18, 18, 18, 18, 18], [18, 18, 18, 18, 18, 18, 18, 12, 18, 18, 18, 18, 18, 18, 18],
        [18, 18, 18, 18, 18, 18, 18, 12, 18, 18, 15, 13, 13, 16, 18], [18, 12, 18, 18, 15, 13, 13, 17, 18, 18, 12, 18, 18, 12, 18], 
        [18, 12, 18, 18, 12, 18, 18, 18, 18, 18, 12, 18, 18, 12, 18], [18, 26, 13, 13, 29, 13, 13, 13, 13, 13, 17, 18, 18, 12, 18], 
        [18, 12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 12, 18], [18, 12, 18, 18, 18, 18, 15, 13, 13, 13, 13, 13, 13, 17, 18], 
        [18, 12, 18, 18, 18, 18, 12, 18, 18, 18, 18, 18, 18, 18, 18], [18, 14, 13, 13, 13, 18, 12, 18, 18, 18, 18, 18, 18, 18, 18], 
        [18, 18, 18, 18, 19, 19, 20, 18, 18, 18, 18, 18, 18, 18, 18], [18, 18, 18, 18, 19, 19, 20, 18, 18, 18, 18, 18, 18, 18, 18], 
        [18, 18, 18, 15, 21, 21, 33, 21, 13, 13, 13, 13, 13, 16, 18], [18, 18, 18, 12, 19, 19, 19, 19, 18, 18, 18, 18, 18, 12, 18], 
        [15, 13, 13, 29, 13, 13, 13, 28, 13, 13, 16, 18, 18, 12, 18], [12, 18, 18, 18, 18, 18, 18, 12, 18, 18, 12, 18, 18, 12, 18], 
        [12, 18, 18, 18, 18, 18, 18, 12, 18, 18, 12, 18, 18, 12, 18], [12, 18, 18, 18, 18, 18, 18, 12, 18, 18, 12, 18, 18, 12, 18], 
        [12, 18, 18, 18, 18, 18, 18, 12, 18, 18, 14, 13, 13, 27, 18], [12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 12, 18], 
        [12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 12, 18], [12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 12, 18], 
        [12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 12, 18], [12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 12, 18], 
        [14, 13, 21, 21, 32, 21, 21, 23, 18, 18, 18, 18, 18, 18, 18], [18, 18, 19, 19, 20, 19, 19, 24, 21, 21, 21, 23, 18, 18, 18], 
        [18, 18, 19, 19, 20, 19, 19, 19, 19, 19, 19, 20, 18, 18, 18], [18, 18, 19, 19, 30, 21, 21, 21, 21, 19, 19, 20, 18, 18, 18], 
        [18, 18, 19, 19, 20, 19, 19, 19, 19, 19, 19, 20, 18, 18, 18], [18, 18, 19, 19, 20, 19, 19, 19, 19, 19, 19, 20, 18, 18, 18], 
        [18, 18, 19, 19, 20, 19, 19, 19, 19, 19, 19, 20, 18, 18, 18], [18, 18, 18, 18, 18, 18, 18, 15, 21, 21, 21, 25, 18, 18, 18], 
        [18, 18, 18, 18, 18, 18, 18, 12, 18, 18, 18, 18, 18, 18, 18], [18, 18, 18, 18, 18, 18, 18, 12, 18, 18, 18, 18, 18, 18, 18], 
        [18, 18, 18, 18, 18, 18, 18, 12, 18, 18, 18, 18, 18, 18, 18]],
                
[[18, 18, 18, 18, 18, 18, 18, 12, 18, 18, 18, 18, 18, 18, 18], [18, 18, 18, 18, 18, 18, 18, 12, 18, 18, 18, 18, 18, 18, 18], 
        [18, 15, 13, 13, 16, 18, 18, 14, 13, 13, 16, 18, 18, 12, 18], [18, 12, 18, 18, 12, 18, 18, 18, 18, 18, 12, 18, 18, 12, 18], 
        [18, 12, 18, 18, 12, 18, 18, 18, 18, 18, 12, 18, 18, 12, 18], [18, 26, 13, 13, 29, 13, 13, 13, 28, 13, 17, 18, 18, 12, 18], 
        [18, 12, 18, 18, 18, 18, 18, 18, 12, 18, 18, 18, 18, 12, 18], [18, 12, 18, 18, 18, 18, 15, 13, 29, 13, 13, 13, 13, 17, 18], 
        [18, 12, 18, 18, 18, 18, 12, 18, 18, 18, 18, 18, 18, 18, 18], [18, 14, 13, 13, 13, 18, 12, 18, 18, 18, 18, 18, 18, 18, 18], 
        [18, 18, 18, 18, 19, 19, 14, 13, 13, 13, 13, 13, 16, 18, 18], [18, 19, 19, 19, 19, 19, 19, 19, 18, 18, 18, 18, 12, 18, 18], 
        [12, 19, 19, 19, 19, 19, 19, 19, 15, 13, 13, 13, 17, 18, 18], [12, 19, 19, 19, 19, 19, 19, 19, 12, 18, 18, 18, 18, 12, 18], 
        [12, 19, 19, 19, 19, 19, 19, 19, 14, 13, 16, 18, 18, 12, 18], [12, 19, 19, 19, 19, 19, 19, 19, 18, 18, 12, 18, 18, 12, 18], 
        [12, 18, 18, 18, 19, 19, 18, 18, 18, 18, 12, 18, 18, 12, 18], [12, 18, 12, 18, 12, 18, 12, 18, 12, 18, 12, 18, 18, 12, 18], 
        [26, 13, 29, 28, 29, 28, 29, 28, 29, 28, 29, 13, 13, 27, 18], [12, 18, 18, 12, 18, 12, 18, 12, 18, 12, 18, 18, 18, 12, 18], 
        [12, 18, 18, 12, 18, 12, 18, 12, 18, 12, 18, 18, 18, 12, 18], [12, 18, 18, 12, 18, 12, 18, 12, 18, 12, 18, 18, 18, 12, 18], 
        [12, 18, 18, 12, 18, 12, 18, 12, 18, 12, 18, 18, 18, 12, 18], [12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 12, 18], 
        [26, 13, 13, 13, 13, 13, 13, 16, 18, 18, 18, 18, 18, 18, 18], [12, 18, 18, 19, 19, 19, 19, 20, 19, 21, 21, 23, 18, 18, 18], 
        [12, 18, 18, 19, 19, 19, 19, 20, 19, 19, 19, 20, 18, 18, 18], [12, 18, 18, 19, 19, 19, 19, 20, 19, 19, 19, 20, 18, 18, 18], 
        [12, 18, 18, 19, 19, 19, 19, 20, 19, 19, 19, 20, 18, 18, 18], [14, 13, 13, 21, 21, 21, 21, 33, 21, 23, 19, 20, 18, 18, 18], 
        [18, 18, 18, 19, 19, 19, 19, 19, 19, 20, 19, 20, 18, 18, 18], [18, 18, 18, 19, 19, 19, 19, 19, 19, 20, 19, 20, 18, 18, 18], 
        [18, 18, 18, 19, 19, 19, 19, 19, 19, 20, 19, 20, 18, 18, 18], [18, 18, 18, 19, 21, 21, 21, 21, 21, 33, 21, 25, 18, 18, 18], 
        [18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18]]]

fen = Tk()
can = Canvas(fen, height=700, width=5000)
fichier_imgg = PhotoImage(file='Simon 1.gif')
fichier_imgd = PhotoImage(file='Simon 2.gif')


d01 = PhotoImage(file='01 (herbe).gif')
d02 = PhotoImage(file='02 (chemin horizontal).gif')
d03 = PhotoImage(file='03 (chemin vertical).gif')
d04 = PhotoImage(file='04 (gauche-bas).gif')
d05 = PhotoImage(file='05 (droite-bas).gif')
d06 = PhotoImage(file='06 (droite-haut).gif')
d07 = PhotoImage(file='07 (gauche-haut).gif')
d08 = PhotoImage(file='08 (arbre).gif')
d09 = PhotoImage(file='09 (eau).gif')
d10 = PhotoImage(file='10 (sable).gif')
d11 = PhotoImage(file='11 (sol rocheux).gif')
d18 = PhotoImage(file='18 (rocher).gif')
d19 = PhotoImage(file='19 (eau sombre).gif')
d14 = PhotoImage(file='14 (gauche-bas).gif')
d15 = PhotoImage(file='15 (droite-bas).gif')
d16 = PhotoImage(file='16 (droite-haut).gif')
d17 = PhotoImage(file='17 (gauche-haut).gif')
d12 = PhotoImage(file='12 (chemin horizontal).gif')
d13 = PhotoImage(file='13 (chemin vertical).gif')
d20 = PhotoImage(file='20 (chemin horizontal eau).gif')
d21 = PhotoImage(file='21 (chemin vertical eau).gif')
d22 = PhotoImage(file='22 (droite-bas eau).gif')
d23 = PhotoImage(file='23 (droite-haut eau).gif')
d24 = PhotoImage(file='24 (gauche-bas eau).gif')
d25 = PhotoImage(file='25 (gauche-haut eau).gif')
d26 = PhotoImage(file='26 (gauche-bas-droite).gif')
d27 = PhotoImage(file='27 (gauche-haut-droite).gif')
d28 = PhotoImage(file='28 (haut-bas-droite).gif')
d29 = PhotoImage(file='29 (haut-bas-gauche).gif')
d30 = PhotoImage(file='30 (gauche-droite-bas eau).gif')
d31 = PhotoImage(file='31 (gauche-droite-haut eau).gif')
d32 = PhotoImage(file='32 (haut-bas-droite eau).gif')
d33 = PhotoImage(file='33 (haut-bas-gauche eau).gif')
clé = PhotoImage(file='Clé.gif')

d = [d01, d02, d03, d04, d05, d06, d07, d08, d09, d10, d11, d12, d13, d14, d15, d16, d17, d18,
     d19, d20, d21, d22, d23, d24, d25, d26, d27, d28, d29, d30, d31, d32, d33]


def decor(M, d):
    for i in range(len(M)):
        for j in range(len(M[0])):
            can.create_image(125 + 50 * i, 125 + 50 * j, image=d[M[i][j] - 1])


decor(M[0],d)

x = 675
y = 575
cpt=0
img = can.create_image(x, y, image=fichier_imgd)
x , y = can.coords(img)


def mouvement(a, b):
    global x, y, img
    x, y = x + a, y + b
    # print(can.coords(img))
    can.coords(img, x, y)

def transition(event):
    global x, y, img, cpt
    print(can.coords(img))
    if cpt == 0 and x == 225 and y == 225:
        decor(M[1], d)
        can.delete(img)
        img = can.create_image(x, y, image=fichier_imgd)
        cpt = 1
    if cpt == 1 and x== 325 and y == 225:
        decor(M[2], d)
        can.delete(img)
        img = can.create_image(x, y, image=fichier_imgd)
        cpt = 2
    if cpt == 2 and x== 525 and y == 325:
        decor(M[3], d)
        can.delete(img)
        img = can.create_image(x, y, image=fichier_imgd)
        cpt = 0
    if cpt == 2 and x== 625 and y == 225:
        decor(M[2], d)
        can.delete(img)
        img = can.create_image(x, y, image=fichier_imgd)
        cpt = 3
    if cpt == 3 and x== 175 and y == 325:
        decor(M[4], d)
        can.delete(img)
        img = can.create_image(x, y, image=fichier_imgd)
    
    # if x == prochaine coordonnée de la transition en x and y == prochaine coordonnée de la transition en y:
    #     decor(M[2], d)
    #     img = can.create_image(x, y, image=fichier_imgd)
    # ect....


def gauche(event):
    global img, x, y
    if x > 150:
        mouvement(-50, 0)
        can.itemconfigure(img, image=fichier_imgg)

def droite(event):
    global img, x, y
    if x < 1800:
        mouvement(50, 0)


def haut(event):
    global img, x, y
    if y > 150:
        mouvement(0, -50)


def bas(event):
    global img, x, y
    if y < 800:
        mouvement(0, 50)



can.pack()

fen.bind("<Left>", gauche)
fen.bind("<Right>", droite)
fen.bind("<Up>", haut)
fen.bind("<Down>", bas)
fen.bind_all("<KeyPress>",transition)

fen.mainloop()
