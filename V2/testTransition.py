## Ecrit sur Notepad++ et éxécuté avec Python 3.6 (64-bit)
## Groupe superdry (Pierre Cry et Matthias Ambroise)

from tkinter import *
from random import *

"""Ce programme consiste à créer le premier niveau, qui se situera sur une plage est une fôret.
Ce code est le squelette du niveau"""

#### Programme de déplacement ####

def mouvement(a,b):
        global x, y, img
        x, y = x+a, y+b
        can.coords(img, x, y)


def gauche(event):
        global img
        if x>150:
                mouvement(-50,0)
                can.itemconfigure(img,image=fichier_imgg)
        
                
def droite(event):
        global img
        if x<1800:
                mouvement(50,0)
                can.itemconfigure(img,image=fichier_imgd)
def haut(event):
        global img
        if y>150:
                mouvement(0,-50)
                
def bas(event):
        global img
        if y<800:
                mouvement(0,50)

def Map1():
        M=[
        [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9],[9,1,1,1,9,9,9,9,9,9,9,9,9,9,9],
        [9,1,1,1,9,9,9,9,9,9,9,9,9,9,9],[9,8,1,8,9,9,9,9,9,9,9,9,9,9,9],
        [9,8,1,8,9,9,9,9,8,10,10,10,10,8,9],[9,8,1,8,9,9,9,9,8,1,1,1,1,8,9],
        [8,8,1,8,8,8,9,9,8,1,1,1,1,8,9],[8,1,1,1,1,8,9,9,8,8,8,1,1,8,9],
        [8,1,1,1,1,8,9,9,9,9,8,1,1,8,9],[8,1,1,1,1,8,9,9,9,9,8,1,1,6,9],
        [8,1,1,1,1,3,6,9,9,9,8,1,1,2,9],[8,1,1,1,1,8,2,9,9,9,8,8,8,2,9],
        [8,1,1,1,1,8,2,9,9,9,9,9,8,2,9],[8,1,1,1,1,8,2,8,8,8,8,8,8,2,9],
        [8,1,1,1,1,8,4,3,3,3,3,3,3,7,9],[8,1,1,1,1,8,8,8,8,1,1,1,1,8,9],
        [8,1,1,1,1,8,9,9,8,1,1,8,8,9,9],[8,1,1,1,1,8,9,9,8,1,1,8,9,9,9],
        [8,1,1,1,1,8,9,9,8,1,1,8,9,9,9],[8,1,1,1,1,8,9,9,8,1,1,8,9,9,9],
        [8,1,1,1,1,8,9,9,8,1,1,8,9,9,9],[8,1,1,1,1,8,9,9,8,1,1,8,9,9,9],
        [8,8,8,1,8,8,9,9,8,1,1,8,9,9,9],[9,9,8,1,8,9,9,9,8,1,1,8,9,9,9],
        [9,9,8,1,8,9,9,9,8,10,10,8,9,9,9],[9,9,8,1,8,9,9,9,9,10,10,9,9,9,9],
        [8,8,8,1,8,9,9,9,9,9,10,9,9,9,9],[8,1,1,1,10,9,9,9,10,10,10,10,9,9,9],
        [8,1,1,1,10,9,9,9,10,10,10,10,9,9,9],[8,1,1,1,10,9,9,9,9,10,10,10,10,9,9],
        [8,1,1,1,10,9,9,10,10,10,10,10,10,9,9],[8,1,1,1,10,9,9,9,10,10,10,10,10,9,9],
        [8,1,1,1,10,9,9,9,9,9,9,9,9,9,9],[8,1,1,1,10,9,9,9,9,9,9,9,9,9,9],
        [8,8,8,8,8,9,9,9,9,9,9,9,9,9,9]
        ]

        for i in range(len(M)):
                for j in range(len(M[0])):
                        if M[i][j]==1:
                                can.create_image(125+50*i,125+50*j,image=d01)
                        if M[i][j]==2:
                                can.create_image(125+50*i,125+50*j,image=d02)
                        if M[i][j]==3:
                                can.create_image(125+50*i,125+50*j,image=d03)
                        if M[i][j]==4:
                                can.create_image(125+50*i,125+50*j,image=d04)
                        if M[i][j]==5:
                                can.create_image(125+50*i,125+50*j,image=d05)
                        if M[i][j]==6:
                                can.create_image(125+50*i,125+50*j,image=d06)
                        if M[i][j]==7:
                                can.create_image(125+50*i,125+50*j,image=d07)
                        if M[i][j]==8:
                                can.create_image(125+50*i,125+50*j,image=d08)
                        if M[i][j]==9:
                                can.create_image(125+50*i,125+50*j,image=d09)
                        if M[i][j]==10:
                                can.create_image(125+50*i,125+50*j,image=d10)
        
                
        can.create_image(225,225,image=clé)

                        
                                
def Map2():
        can.delete(ALL)
        M=[
        [108, 108, 108, 108, 108, 108, 108, 101, 108, 108, 108, 108, 108, 108, 108], [108, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 108], 
        [108, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 108], [108, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 108], 
        [108, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 108], [108, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 108], 
        [108, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 108], [108, 108, 108, 108, 108, 108, 108, 101, 108, 108, 108, 108, 108, 108, 108], 
        [108, 109, 109, 109, 109, 108, 101, 101, 101, 101, 108, 108, 108, 101, 108], [108, 109, 109, 109, 109, 108, 101, 101, 101, 101, 108, 108, 108, 101, 108], 
        [108, 109, 109, 109, 109, 108, 101, 101, 101, 101, 108, 108, 108, 101, 108], [108, 109, 109, 109, 109, 108, 101, 101, 101, 101, 108, 108, 108, 101, 108], 
        [108, 109, 109, 109, 109, 108, 101, 101, 101, 101, 108, 108, 108, 101, 108], [108, 108, 109, 109, 108, 101, 101, 101, 101, 101, 108, 108, 108, 101, 108], 
        [108, 109, 109, 109, 108, 101, 101, 101, 101, 101, 101, 101, 101, 101, 108], [108, 109, 109, 108, 108, 108, 108, 101, 101, 101, 101, 108, 108, 108, 108], 
        [108, 109, 109, 109, 109, 109, 108, 101, 101, 101, 101, 101, 101, 101, 108], [101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 108, 108, 108, 108], 
        [108, 109, 109, 109, 109, 109, 108, 101, 108, 108, 101, 101, 101, 101, 108], [108, 109, 109, 109, 109, 109, 108, 108, 108, 101, 101, 101, 101, 101, 108], 
        [108, 109, 109, 109, 109, 109, 108, 108, 108, 108, 108, 108, 108, 101, 108], [108, 109, 109, 109, 109, 109, 108, 108, 108, 108, 101, 101, 101, 101, 108], 
        [108, 109, 109, 109, 109, 109, 108, 108, 108, 108, 108, 108, 108, 101, 108], [108, 109, 109, 109, 109, 109, 108, 108, 108, 108, 108, 108, 108, 101, 108], 
        [108, 109, 109, 109, 109, 109, 108, 108, 108, 108, 108, 108, 108, 101, 108], [108, 109, 109, 109, 109, 109, 108, 101, 108, 108, 108, 108, 108, 101, 108], 
        [108, 109, 109, 109, 109, 109, 108, 101, 108, 108, 108, 108, 108, 101, 108], [108, 109, 109, 109, 109, 109, 108, 101, 108, 108, 108, 108, 108, 101, 108], 
        [108, 109, 109, 109, 109, 109, 108, 101, 108, 108, 101, 101, 101, 101, 108], [108, 109, 109, 109, 109, 109, 108, 101, 108, 108, 101, 101, 101, 101, 108], 
        [108, 108, 108, 108, 108, 108, 108, 101, 101, 101, 101, 101, 101, 108, 108], [108, 108, 108, 108, 108, 108, 108, 101, 108, 108, 101, 101, 108, 108, 108], 
        [108, 108, 108, 108, 108, 108, 108, 101, 108, 108, 101, 101, 108, 108, 108], [108, 108, 108, 108, 108, 108, 108, 101, 101, 101, 101, 101, 108, 108, 108], 
        [108, 108, 108, 108, 108, 108, 108, 101, 108, 108, 108, 108, 108, 108, 108]]
        
        for i in range(len(M)):
                for j in range(len(M[0])):
                        if M[i][j]==101:
                                can.create_image(125+50*i,125+50*j,image=g101)
                        if M[i][j]==108:
                                can.create_image(125+50*i,125+50*j,image=g108)
                        if M[i][j]==109:
                                can.create_image(125+50*i,125+50*j,image=g109)
        x=125
        y=475
                
        img=can.create_image(x,y,image=fichier_imgd)
                        
def Map3():
        can.Delete(ALL)
        M=[
        [108, 108, 108, 108, 108, 108, 108, 102, 108, 108, 108, 108, 108, 108, 108], [108, 108, 108, 108, 108, 108, 108, 102, 108, 108, 108, 108, 108, 108, 108], 
        [108, 108, 108, 108, 108, 108, 108, 102, 108, 108, 105, 103, 103, 106, 108], [108, 102, 108, 108, 105, 103, 103, 107, 108, 108, 102, 108, 108, 102, 108], 
        [108, 102, 108, 108, 102, 108, 108, 108, 108, 108, 102, 108, 108, 102, 108], [108, 117, 103, 103, 121, 103, 103, 103, 103, 103, 107, 108, 108, 102, 108], 
        [108, 102, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 102, 108], [108, 102, 108, 108, 108, 108, 105, 103, 103, 103, 103, 103, 103, 107, 108], 
        [108, 102, 108, 108, 108, 108, 102, 108, 108, 108, 108, 108, 108, 108, 108], [108, 104, 103, 103, 103, 108, 102, 108, 108, 108, 108, 108, 108, 108, 108], 
        [108, 108, 108, 108, 109, 109, 111, 108, 108, 108, 108, 108, 108, 108, 108], [108, 108, 108, 108, 109, 109, 111, 108, 108, 108, 108, 108, 108, 108, 108], 
        [108, 108, 108, 105, 112, 112, 125, 112, 103, 103, 103, 103, 103, 106, 108], [108, 108, 108, 102, 109, 109, 109, 109, 108, 108, 108, 108, 108, 102, 108], 
        [105, 103, 103, 121, 103, 103, 103, 119, 103, 103, 106, 108, 108, 102, 108], [102, 108, 108, 108, 108, 108, 108, 102, 108, 108, 102, 108, 108, 102, 108], 
        [102, 108, 108, 108, 108, 108, 108, 102, 108, 108, 102, 108, 108, 102, 108], [102, 108, 108, 108, 108, 108, 108, 102, 108, 108, 102, 108, 108, 102, 108], 
        [102, 108, 108, 108, 108, 108, 108, 102, 108, 108, 104, 103, 103, 118, 108], [102, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 102, 108], 
        [102, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 102, 108], [102, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 102, 108], 
        [102, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 102, 108], [102, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 102, 108], 
        [104, 103, 112, 112, 124, 112, 112, 114, 108, 108, 108, 108, 108, 108, 108], [108, 108, 109, 109, 111, 109, 109, 115, 112, 112, 112, 114, 108, 108, 108], 
        [108, 108, 109, 109, 111, 109, 109, 109, 109, 109, 109, 111, 108, 108, 108], [108, 108, 109, 109, 122, 112, 112, 112, 112, 109, 109, 111, 108, 108, 108], 
        [108, 108, 109, 109, 111, 109, 109, 109, 109, 109, 109, 111, 108, 108, 108], [108, 108, 109, 109, 111, 109, 109, 109, 109, 109, 109, 111, 108, 108, 108], 
        [108, 108, 109, 109, 111, 109, 109, 109, 109, 109, 109, 111, 108, 108, 108], [108, 108, 108, 108, 108, 108, 108, 105, 112, 112, 112, 116, 108, 108, 108], 
        [108, 108, 108, 108, 108, 108, 108, 102, 108, 108, 108, 108, 108, 108, 108], [108, 108, 108, 108, 108, 108, 108, 102, 108, 108, 108, 108, 108, 108, 108], 
        [108, 108, 108, 108, 108, 108, 108, 102, 108, 108, 108, 108, 108, 108, 108]]


        for i in range(len(M)):
                for j in range(len(M[0])):
                        
                        if M[i][j]==102:
                                can.create_image(125+50*i,125+50*j,image=g102)
                        if M[i][j]==103:
                                can.create_image(125+50*i,125+50*j,image=g103)
                        if M[i][j]==104:
                                can.create_image(125+50*i,125+50*j,image=g104)
                        if M[i][j]==105:
                                can.create_image(125+50*i,125+50*j,image=g105)
                        if M[i][j]==106:
                                can.create_image(125+50*i,125+50*j,image=g106)
                        if M[i][j]==107:
                                can.create_image(125+50*i,125+50*j,image=g107)
                        if M[i][j]==108:
                                can.create_image(125+50*i,125+50*j,image=g108)
                        if M[i][j]==109:
                                can.create_image(125+50*i,125+50*j,image=g109)
                        if M[i][j]==111:
                                can.create_image(125+50*i,125+50*j,image=g111)
                        if M[i][j]==112:
                                can.create_image(125+50*i,125+50*j,image=g112)
                        if M[i][j]==113:
                                can.create_image(125+50*i,125+50*j,image=g113)
                        if M[i][j]==114:
                                can.create_image(125+50*i,125+50*j,image=g114)
                        if M[i][j]==115:
                                can.create_image(125+50*i,125+50*j,image=g115)
                        if M[i][j]==116:
                                can.create_image(125+50*i,125+50*j,image=g116)
                        if M[i][j]==117:
                                can.create_image(125+50*i,125+50*j,image=g117)
                        if M[i][j]==118:
                                can.create_image(125+50*i,125+50*j,image=g118)
                        if M[i][j]==119:
                                can.create_image(125+50*i,125+50*j,image=g119)
                        if M[i][j]==121:
                                can.create_image(125+50*i,125+50*j,image=g121)
                        if M[i][j]==122:
                                can.create_image(125+50*i,125+50*j,image=g122)  
                        if M[i][j]==123:
                                can.create_image(125+50*i,125+50*j,image=g123)
                        if M[i][j]==124:
                                can.create_image(125+50*i,125+50*j,image=g124)
                        if M[i][j]==125:
                                can.create_image(125+50*i,125+50*j,image=g125)

        x=125
        y=475
        img=can.create_image(x,y,image=fichier_imgd)
                


def Map4():
        can.delete(ALL)
        M=[
        [108, 108, 108, 108, 108, 108, 108, 102, 108, 108, 108, 108, 108, 108, 108], [108, 108, 108, 108, 108, 108, 108, 102, 108, 108, 108, 108, 108, 108, 108], 
        [108, 105, 103, 103, 106, 108, 108, 104, 103, 103, 106, 108, 108, 102, 108], [108, 102, 108, 108, 102, 108, 108, 108, 108, 108, 102, 108, 108, 102, 108], 
        [108, 102, 108, 108, 102, 108, 108, 108, 108, 108, 102, 108, 108, 102, 108], [108, 117, 103, 103, 121, 103, 103, 103, 119, 103, 107, 108, 108, 102, 108], 
        [108, 102, 108, 108, 108, 108, 108, 108, 102, 108, 108, 108, 108, 102, 108], [108, 102, 108, 108, 108, 108, 105, 103, 121, 103, 103, 103, 103, 107, 108], 
        [108, 102, 108, 108, 108, 108, 102, 108, 108, 108, 108, 108, 108, 108, 108], [108, 104, 103, 103, 103, 108, 102, 108, 108, 108, 108, 108, 108, 108, 108], 
        [108, 108, 108, 108, 109, 109, 104, 103, 103, 103, 103, 103, 106, 108, 108], [108, 109, 109, 109, 109, 109, 109, 109, 108, 108, 108, 108, 102, 108, 108], 
        [102, 109, 109, 109, 109, 109, 109, 109, 105, 103, 103, 103, 107, 108, 108], [102, 109, 109, 109, 109, 109, 109, 109, 102, 108, 108, 108, 108, 102, 108], 
        [102, 109, 109, 109, 109, 109, 109, 109, 104, 103, 106, 108, 108, 102, 108], [102, 109, 109, 109, 109, 109, 109, 109, 108, 108, 102, 108, 108, 102, 108], 
        [102, 108, 108, 108, 109, 109, 108, 108, 108, 108, 102, 108, 108, 102, 108], [102, 108, 102, 108, 102, 108, 102, 108, 102, 108, 102, 108, 108, 102, 108], 
        [117, 103, 121, 119, 121, 119, 121, 119, 121, 119, 121, 103, 103, 118, 108], [102, 108, 108, 102, 108, 102, 108, 102, 108, 102, 108, 108, 108, 102, 108], 
        [102, 108, 108, 102, 108, 102, 108, 102, 108, 102, 108, 108, 108, 102, 108], [102, 108, 108, 102, 108, 102, 108, 102, 108, 102, 108, 108, 108, 102, 108], 
        [102, 108, 108, 102, 108, 102, 108, 102, 108, 102, 108, 108, 108, 102, 108], [102, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 102, 108], 
        [117, 103, 103, 103, 103, 103, 103, 106, 108, 108, 108, 108, 108, 108, 108], [102, 108, 108, 109, 109, 109, 109, 111, 109, 112, 112, 114, 108, 108, 108], 
        [102, 108, 108, 109, 109, 109, 109, 111, 109, 109, 109, 111, 108, 108, 108], [102, 108, 108, 109, 109, 109, 109, 111, 109, 109, 109, 111, 108, 108, 108], 
        [102, 108, 108, 109, 109, 109, 109, 111, 109, 109, 109, 111, 108, 108, 108], [104, 103, 103, 112, 112, 112, 112, 125, 112, 114, 109, 111, 108, 108, 108], 
        [108, 108, 108, 109, 109, 109, 109, 109, 109, 111, 109, 111, 108, 108, 108], [108, 108, 108, 109, 109, 109, 109, 109, 109, 111, 109, 111, 108, 108, 108], 
        [108, 108, 108, 109, 109, 109, 109, 109, 109, 111, 109, 111, 108, 108, 108], [108, 108, 108, 109, 112, 112, 112, 112, 112, 125, 112, 116, 108, 108, 108], 
        [108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108]]


        for i in range(len(M)):
                for j in range(len(M[0])):
                        if M[i][j]==102:
                                can.create_image(125+50*i,125+50*j,image=g102)
                        if M[i][j]==103:
                                can.create_image(125+50*i,125+50*j,image=g103)
                        if M[i][j]==104:
                                can.create_image(125+50*i,125+50*j,image=g104)
                        if M[i][j]==105:
                                can.create_image(125+50*i,125+50*j,image=g105)
                        if M[i][j]==106:
                                can.create_image(125+50*i,125+50*j,image=g106)
                        if M[i][j]==107:
                                can.create_image(125+50*i,125+50*j,image=g107)
                        if M[i][j]==108:
                                can.create_image(125+50*i,125+50*j,image=g108)
                        if M[i][j]==109:
                                can.create_image(125+50*i,125+50*j,image=g109)
                        if M[i][j]==111:
                                can.create_image(125+50*i,125+50*j,image=g111)
                        if M[i][j]==112:
                                can.create_image(125+50*i,125+50*j,image=g112)
                        if M[i][j]==113:
                                can.create_image(125+50*i,125+50*j,image=g113)
                        if M[i][j]==114:
                                can.create_image(125+50*i,125+50*j,image=g114)
                        if M[i][j]==115:
                                can.create_image(125+50*i,125+50*j,image=g115)
                        if M[i][j]==116:
                                can.create_image(125+50*i,125+50*j,image=g116)
                        if M[i][j]==117:
                                can.create_image(125+50*i,125+50*j,image=g117)
                        if M[i][j]==118:
                                can.create_image(125+50*i,125+50*j,image=g118)
                        if M[i][j]==119:
                                can.create_image(125+50*i,125+50*j,image=g119)
                        if M[i][j]==121:
                                can.create_image(125+50*i,125+50*j,image=g121)
                        if M[i][j]==122:
                                can.create_image(125+50*i,125+50*j,image=g122)  
                        if M[i][j]==123:
                                can.create_image(125+50*i,125+50*j,image=g123)
                        if M[i][j]==124:
                                can.create_image(125+50*i,125+50*j,image=g124)
                        if M[i][j]==125:
                                can.create_image(125+50*i,125+50*j,image=g125)
                
                
#### Création de l'environnement ####

fen = Tk()
can = Canvas(fen, height=1000, width=5000)


##### Implémentation du décor #####

d01=PhotoImage(file='01 (herbe).gif')
d02=PhotoImage(file='02 (chemin horizontal).gif')
d03=PhotoImage(file='03 (chemin vertical).gif')
d04=PhotoImage(file='04 (gauche-bas).gif')
d05=PhotoImage(file='05 (droite-bas).gif')
d06=PhotoImage(file='06 (droite-haut).gif')
d07=PhotoImage(file='07 (gauche-haut).gif')
d08=PhotoImage(file='08 (arbre).gif')
d09=PhotoImage(file='09 (eau).gif')
d10=PhotoImage(file='10 (sable).gif')

#Grotte
g108=PhotoImage(file='108 (rocher).gif')
g101=PhotoImage(file='101 (sol rocheux).gif')
g102=PhotoImage(file='102 (chemin horizontal).gif')
g103=PhotoImage(file='103 (chemin vertical).gif')
g109=PhotoImage(file='109 (eau sombre).gif')
g111=PhotoImage(file='111 (chemin horizontal eau).gif')
g112=PhotoImage(file='112 (chemin vertical eau).gif')

#Virage
g104=PhotoImage(file='104 (gauche-bas).gif')
g107=PhotoImage(file='107 (gauche-haut).gif')
g105=PhotoImage(file='105 (droite-bas).gif')
g106=PhotoImage(file='106 (droite-haut).gif')

g115=PhotoImage(file='115 (gauche-bas eau).gif')
g116=PhotoImage(file='116 (gauche-haut eau).gif')
g113=PhotoImage(file='113 (droite-bas eau).gif')
g114=PhotoImage(file='114 (droite-haut eau).gif')

g125=PhotoImage(file='125 (haut-bas-gauche eau).gif')
g123=PhotoImage(file='123 (gauche-droite-haut eau).gif')
g124=PhotoImage(file='124 (haut-bas-droite eau).gif')
g122=PhotoImage(file='122 (gauche-droite-bas eau).gif')

g119=PhotoImage(file='119 (haut-bas-droite).gif')
g118=PhotoImage(file='118 (gauche-haut-droite).gif')
g121=PhotoImage(file='121 (haut-bas-gauche).gif')
g117=PhotoImage(file='117 (gauche-bas-droite).gif')     

#Perso
fichier_imgg=PhotoImage(file='Simon 1.gif')
fichier_imgd=PhotoImage(file='Simon 2.gif')


#Objet
clé=PhotoImage(file='Clé.gif')


Map1()
x=1625
y=625
img=can.create_image(x,y,image=fichier_imgd)

can.pack()

fen.bind("<Left>", gauche)
fen.bind("<Right>", droite)
fen.bind("<Up>", haut)
fen.bind("<Down>", bas)

fen.mainloop()
